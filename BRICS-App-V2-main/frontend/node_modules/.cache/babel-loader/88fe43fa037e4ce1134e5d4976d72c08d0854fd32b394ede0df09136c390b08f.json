{"ast":null,"code":"// api.js\nconst BASE_URL = 'http://localhost:8080';\nlet csrfToken = null;\nlet authToken = null;\nasync function getCsrfToken() {\n  if (!csrfToken) {\n    const response = await fetch(`${BASE_URL}/csrf-token`, {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    csrfToken = data.csrfToken;\n  }\n  return csrfToken;\n}\nasync function getAuthToken() {\n  if (!authToken) {\n    // Fetch the auth token, e.g., during login\n    const {\n      data\n    } = await loginUserAPI({/* login credentials */});\n    authToken = data.token;\n  }\n  return authToken;\n}\nexport async function registerUser(userData) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(`Registration failed: ${error}`);\n  }\n  return response.json();\n}\nexport async function loginEmployeeAPI({\n  username,\n  password\n}) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\nexport async function loginUserAPI(credentials) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(credentials)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(`Invalid login: ${error}`);\n  }\n  const data = await response.json();\n  if (!data.success || !data.data || !data.data.token) {\n    throw new Error('Invalid response from server');\n  }\n  return data;\n}\nexport async function getBudget() {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/budget', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const {\n        error\n      } = await response.json();\n      throw new Error(`Failed to fetch budget: ${error}`);\n    }\n    return response.json();\n  } catch (err) {\n    console.error('Error fetching budget:', err);\n    throw err;\n  }\n}\nexport async function updateBudget(budgetData) {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/budget', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include',\n      body: JSON.stringify(budgetData)\n    });\n    if (!response.ok) {\n      const {\n        error\n      } = await response.json();\n      throw new Error(`Failed to update budget: ${error}`);\n    }\n    return response.json();\n  } catch (err) {\n    console.error('Error updating budget:', err);\n    throw err;\n  }\n}\nexport async function getTransactions() {\n  try {\n    const token = await getAuthToken();\n    console.log(\"Token for getTransactions:\", token); // Log the token\n    const response = await fetch('/api/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const {\n        error\n      } = await response.json();\n      throw new Error(`Failed to fetch transactions: ${error}`);\n    }\n    return response.json();\n  } catch (err) {\n    console.error('Error fetching transactions:', err);\n    throw err;\n  }\n}\nexport async function createTransaction(transactionData) {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(transactionData)\n    });\n    if (!response.ok) {\n      const {\n        error\n      } = await response.json();\n      throw new Error(`Failed to create transaction: ${error}`);\n    }\n    return response.json();\n  } catch (err) {\n    console.error('Error creating transaction:', err);\n    throw err;\n  }\n}","map":{"version":3,"names":["BASE_URL","csrfToken","authToken","getCsrfToken","response","fetch","credentials","data","json","getAuthToken","loginUserAPI","token","registerUser","userData","method","headers","body","JSON","stringify","ok","error","Error","loginEmployeeAPI","username","password","success","getBudget","err","console","updateBudget","budgetData","getTransactions","log","createTransaction","transactionData"],"sources":["C:/Users/mrdun/Downloads/BRICS-App-V2-main/BRICS-App-V2-main/frontend/src/api.js"],"sourcesContent":["// api.js\nconst BASE_URL = 'http://localhost:8080';\nlet csrfToken = null;\nlet authToken = null;\n\nasync function getCsrfToken() {\n  if (!csrfToken) {\n    const response = await fetch(`${BASE_URL}/csrf-token`, {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    csrfToken = data.csrfToken;\n  }\n  return csrfToken;\n}\n\nasync function getAuthToken() {\n  if (!authToken) {\n    // Fetch the auth token, e.g., during login\n    const { data } = await loginUserAPI({ /* login credentials */ });\n    authToken = data.token;\n  }\n  return authToken;\n}\n\nexport async function registerUser(userData) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(`Registration failed: ${error}`);\n  }\n\n  return response.json();\n}\n\nexport async function loginEmployeeAPI({ username, password }) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({ username, password }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json();\n}\n\nexport async function loginUserAPI(credentials) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(credentials),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(`Invalid login: ${error}`);\n  }\n\n  const data = await response.json();\n  if (!data.success || !data.data || !data.data.token) {\n    throw new Error('Invalid response from server');\n  }\n\n  return data;\n}\n\nexport async function getBudget() {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/budget', {\n      method: 'POST', \n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    });\n\n    if (!response.ok) {\n      const { error } = await response.json();\n      throw new Error(`Failed to fetch budget: ${error}`);\n    }\n\n    return response.json();\n  } catch (err) {\n    console.error('Error fetching budget:', err);\n    throw err;\n  }\n}\n\nexport async function updateBudget(budgetData) {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/budget', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include',\n      body: JSON.stringify(budgetData),\n    });\n\n    if (!response.ok) {\n      const { error } = await response.json();\n      throw new Error(`Failed to update budget: ${error}`);\n    }\n\n    return response.json();\n  } catch (err) {\n    console.error('Error updating budget:', err);\n    throw err;\n  }\n}\n\nexport async function getTransactions() {\n  try {\n    const token = await getAuthToken();\n    console.log(\"Token for getTransactions:\", token); // Log the token\n    const response = await fetch('/api/transactions', {\n      method: 'POST', \n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n    });\n\n    if (!response.ok) {\n      const { error } = await response.json();\n      throw new Error(`Failed to fetch transactions: ${error}`);\n    }\n\n    return response.json();\n  } catch (err) {\n    console.error('Error fetching transactions:', err);\n    throw err;\n  }\n}\n\nexport async function createTransaction(transactionData) {\n  try {\n    const token = await getAuthToken();\n    const response = await fetch('/api/transactions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(transactionData),\n    });\n\n    if (!response.ok) {\n      const { error } = await response.json();\n      throw new Error(`Failed to create transaction: ${error}`);\n    }\n\n    return response.json();\n  } catch (err) {\n    console.error('Error creating transaction:', err);\n    throw err;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}