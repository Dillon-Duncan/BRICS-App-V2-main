{"ast":null,"code":"// src/api.js\nexport async function loginUserAPI({\n  username,\n  password,\n  accNumber\n}) {\n  // API call to log in a regular user.\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userName: username,\n      password,\n      accNumber\n    })\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\nexport async function loginEmployeeAPI({\n  username,\n  password\n}) {\n  // API call to log in an employee\n  const response = await fetch('/api/employee-login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json(); // Assume response contains user data\n}\n\n// Middleware to check if the authenticated user is an employee\nconst authenticateEmployee = (req, res, next) => {\n  const {\n    user\n  } = req; // Assume req.user is set after JWT authentication\n  if (!user || user.role !== 'employee') {\n    return res.status(403).json({\n      error: 'Access denied. Employee role required.'\n    });\n  }\n  next();\n};\n\n// Fetch all user payment history (accessible only by employees)\napp.get('/payment-history', authenticateToken, authenticateEmployee, async (req, res) => {\n  try {\n    const users = await User.find({});\n\n    // Extracting payment transactions from all users\n    const paymentHistory = users.flatMap(user => user.transactions).filter(transaction => transaction.type === 'Payment').map(transaction => ({\n      name: transaction.name,\n      amount: transaction.amount,\n      date: transaction.date,\n      userName: users.find(u => u.transactions.includes(transaction)).userName // Linking transaction to a username\n    }));\n    res.json(paymentHistory);\n  } catch (err) {\n    console.error('Error fetching payment history:', err);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});","map":{"version":3,"names":["loginUserAPI","username","password","accNumber","response","fetch","method","headers","body","JSON","stringify","userName","ok","error","json","Error","loginEmployeeAPI","authenticateEmployee","req","res","next","user","role","status","app","get","authenticateToken","users","User","find","paymentHistory","flatMap","transactions","filter","transaction","type","map","name","amount","date","u","includes","err","console"],"sources":["C:/Users/mrdun/Downloads/BRICS-App-V2-main/BRICS-App-V2-main/frontend/src/api.js"],"sourcesContent":["// src/api.js\nexport async function loginUserAPI({ username, password, accNumber }) {\n  // API call to log in a regular user.\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ userName: username, password, accNumber }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json(); \n}\n\nexport async function loginEmployeeAPI({ username, password }) {\n  // API call to log in an employee\n  const response = await fetch('/api/employee-login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json(); // Assume response contains user data\n}\n\n// Middleware to check if the authenticated user is an employee\nconst authenticateEmployee = (req, res, next) => {\n  const { user } = req; // Assume req.user is set after JWT authentication\n  if (!user || user.role !== 'employee') {\n    return res.status(403).json({ error: 'Access denied. Employee role required.' });\n  }\n  next();\n};\n\n// Fetch all user payment history (accessible only by employees)\napp.get('/payment-history', authenticateToken, authenticateEmployee, async (req, res) => {\n  try {\n    const users = await User.find({});\n\n    // Extracting payment transactions from all users\n    const paymentHistory = users\n      .flatMap(user => user.transactions)\n      .filter(transaction => transaction.type === 'Payment')\n      .map(transaction => ({\n        name: transaction.name,\n        amount: transaction.amount,\n        date: transaction.date,\n        userName: users.find(u => u.transactions.includes(transaction)).userName, // Linking transaction to a username\n      }));\n\n    res.json(paymentHistory);\n  } catch (err) {\n    console.error('Error fetching payment history:', err);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}