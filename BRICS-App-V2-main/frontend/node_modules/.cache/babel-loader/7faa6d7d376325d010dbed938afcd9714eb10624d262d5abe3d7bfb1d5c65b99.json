{"ast":null,"code":"// src/api.js\nexport async function loginUserAPI(_ref){let{username,password,accNumber}=_ref;// API call to log in a regular user.\nconst response=await fetch('/api/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userName:username,password,accNumber})});if(!response.ok){const{error}=await response.json();throw new Error(error||'Invalid login');}return response.json();}export async function loginEmployeeAPI(_ref2){let{username,password}=_ref2;// API call to log in an employee\nconst response=await fetch('/api/employee-login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});if(!response.ok){const{error}=await response.json();throw new Error(error||'Invalid login');}return response.json();// Assume response contains user data\n}export async function registerUser(userData){const response=await fetch('/api/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){const{error}=await response.json();throw new Error(error||'Registration failed');}return response.json();}// Middleware to check if the authenticated user is an employee\nconst authenticateEmployee=(req,res,next)=>{const{user}=req;// Assume req.user is set after JWT authentication\nif(!user||user.role!=='employee'){return res.status(403).json({error:'Access denied. Employee role required.'});}next();};// Fetch all user payment history (accessible only by employees)\napp.get('/payment-history',authenticateToken,authenticateEmployee,async(req,res)=>{try{const users=await User.find({});// Extracting payment transactions from all users\nconst paymentHistory=users.flatMap(user=>user.transactions).filter(transaction=>transaction.type==='Payment').map(transaction=>({name:transaction.name,amount:transaction.amount,date:transaction.date,userName:users.find(u=>u.transactions.includes(transaction)).userName// Linking transaction to a username\n}));res.json(paymentHistory);}catch(err){console.error('Error fetching payment history:',err);res.status(500).json({error:'Internal server error'});}});","map":{"version":3,"names":["loginUserAPI","_ref","username","password","accNumber","response","fetch","method","headers","body","JSON","stringify","userName","ok","error","json","Error","loginEmployeeAPI","_ref2","registerUser","userData","authenticateEmployee","req","res","next","user","role","status","app","get","authenticateToken","users","User","find","paymentHistory","flatMap","transactions","filter","transaction","type","map","name","amount","date","u","includes","err","console"],"sources":["C:/Users/mrdun/Downloads/BRICS-App-V2-main/BRICS-App-V2-main/frontend/src/api.js"],"sourcesContent":["// src/api.js\nexport async function loginUserAPI({ username, password, accNumber }) {\n  // API call to log in a regular user.\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ userName: username, password, accNumber }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json(); \n}\n\nexport async function loginEmployeeAPI({ username, password }) {\n  // API call to log in an employee\n  const response = await fetch('/api/employee-login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json(); // Assume response contains user data\n}\n\n  export async function registerUser(userData) {\n    const response = await fetch('/api/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n  \n    if (!response.ok) {\n      const { error } = await response.json();\n      throw new Error(error || 'Registration failed');\n    }\n  \n    return response.json();\n  }\n\n// Middleware to check if the authenticated user is an employee\nconst authenticateEmployee = (req, res, next) => {\n  const { user } = req; // Assume req.user is set after JWT authentication\n  if (!user || user.role !== 'employee') {\n    return res.status(403).json({ error: 'Access denied. Employee role required.' });\n  }\n  next();\n};\n\n// Fetch all user payment history (accessible only by employees)\napp.get('/payment-history', authenticateToken, authenticateEmployee, async (req, res) => {\n  try {\n    const users = await User.find({});\n\n    // Extracting payment transactions from all users\n    const paymentHistory = users\n      .flatMap(user => user.transactions)\n      .filter(transaction => transaction.type === 'Payment')\n      .map(transaction => ({\n        name: transaction.name,\n        amount: transaction.amount,\n        date: transaction.date,\n        userName: users.find(u => u.transactions.includes(transaction)).userName, // Linking transaction to a username\n      }));\n\n    res.json(paymentHistory);\n  } catch (err) {\n    console.error('Error fetching payment history:', err);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}