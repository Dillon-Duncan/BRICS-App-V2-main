{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrdun\\\\Desktop\\\\BRICS\\\\BRICS-App-V2-main\\\\frontend\\\\src\\\\components\\\\Transactions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Transactions() {\n  _s();\n  // Accounts data (each account has a name, associated currency, and balance)\n  const [accounts, setAccounts] = useState([{\n    id: 1,\n    name: 'Dollin',\n    currency: 'BRL',\n    balance: 1000\n  }, {\n    id: 2,\n    name: 'Wollice',\n    currency: 'RUB',\n    balance: 8000\n  }, {\n    id: 3,\n    name: 'Shetana',\n    currency: 'INR',\n    balance: 15000\n  }, {\n    id: 4,\n    name: 'Miben',\n    currency: 'CNY',\n    balance: 2000\n  }, {\n    id: 5,\n    name: 'Milema',\n    currency: 'ZAR',\n    balance: 5000\n  }]);\n\n  // Initial transaction history (transactions that relate to accounts)\n  const [transactionHistory, setTransactionHistory] = useState([{\n    from: 'workUser',\n    to: 'Dollin',\n    amount: 500,\n    type: 'transfer',\n    currency: 'BRL',\n    timestamp: new Date().toLocaleString()\n  }, {\n    from: 'workUser',\n    to: 'Shetana',\n    amount: 1000,\n    type: 'deposit',\n    currency: 'RUB',\n    timestamp: new Date().toLocaleString()\n  }, {\n    from: 'workUser',\n    to: 'Miben',\n    amount: 200,\n    type: 'transfer',\n    currency: 'INR',\n    timestamp: new Date().toLocaleString()\n  }]);\n\n  // Transaction form state\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [transactionAmount, setTransactionAmount] = useState('');\n  const [transactionType, setTransactionType] = useState('');\n  const [transactionCurrency, setTransactionCurrency] = useState('');\n  const [transactionTo, setTransactionTo] = useState('');\n  const [error, setError] = useState(null);\n  const [isPasswordPopupVisible, setIsPasswordPopupVisible] = useState(false);\n  const [employeePassword, setEmployeePassword] = useState('');\n  const [isPasswordCorrect, setIsPasswordCorrect] = useState(false);\n  const correctPassword = 'StrongPassword123!'; // Hardcoded strong password\n\n  const handleAddTransaction = () => {\n    if (!selectedAccount || !transactionAmount || !transactionType || !transactionCurrency) {\n      setError(\"Please fill in all fields\");\n      return;\n    }\n    const amount = parseFloat(transactionAmount);\n    if (isNaN(amount) || amount <= 0) {\n      setError(\"Please enter a valid amount.\");\n      return;\n    }\n\n    // Show password pop-up for confirmation\n    setIsPasswordPopupVisible(true);\n  };\n  const handlePasswordSubmit = () => {\n    if (employeePassword === correctPassword) {\n      setIsPasswordCorrect(true);\n      processTransaction(); // Proceed with transaction if password is correct\n    } else {\n      setError(\"Incorrect password. Please try again.\");\n    }\n  };\n  const processTransaction = () => {\n    const amount = parseFloat(transactionAmount);\n    const updatedAccounts = [...accounts];\n    const accountIndex = updatedAccounts.findIndex(account => account.name === selectedAccount);\n    if (transactionType === 'deposit') {\n      updatedAccounts[accountIndex].balance += amount;\n    } else if (transactionType === 'withdrawal') {\n      if (updatedAccounts[accountIndex].balance >= amount) {\n        updatedAccounts[accountIndex].balance -= amount;\n      } else {\n        setError(\"Insufficient funds for withdrawal.\");\n        return;\n      }\n    } else if (transactionType === 'transfer') {\n      const transferToAccount = transactionTo;\n      const targetAccountIndex = updatedAccounts.findIndex(account => account.name === transferToAccount);\n      if (targetAccountIndex === -1) {\n        setError(\"Invalid target account.\");\n        return;\n      }\n      if (updatedAccounts[accountIndex].balance >= amount) {\n        updatedAccounts[accountIndex].balance -= amount;\n        updatedAccounts[targetAccountIndex].balance += amount;\n\n        // Record the transfer between accounts\n        const newTransaction = {\n          from: selectedAccount,\n          to: transactionTo,\n          amount: amount,\n          type: 'transfer',\n          currency: transactionCurrency,\n          timestamp: new Date().toLocaleString()\n        };\n\n        // Add the new transaction at the top of the history (keep only the 3 latest transactions)\n        setTransactionHistory(prevHistory => [newTransaction, ...prevHistory].slice(0, 3));\n        setError(null);\n      } else {\n        setError(\"Insufficient funds for transfer.\");\n        return;\n      }\n    }\n\n    // Create a non-transfer transaction\n    if (transactionType !== 'transfer') {\n      const newTransaction = {\n        from: selectedAccount,\n        amount: amount,\n        type: transactionType,\n        currency: transactionCurrency,\n        timestamp: new Date().toLocaleString()\n      };\n\n      // Add the new transaction at the top of the history (keep only the 3 latest transactions)\n      setTransactionHistory(prevHistory => [newTransaction, ...prevHistory].slice(0, 3));\n    }\n\n    // Update the accounts\n    setAccounts(updatedAccounts);\n    setTransactionAmount('');\n    setTransactionType('');\n    setTransactionCurrency('');\n    setTransactionTo('');\n    setSelectedAccount('');\n    setIsPasswordPopupVisible(false); // Close password popup after processing the transaction\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transactions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"form-title\",\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedAccount,\n        onChange: e => setSelectedAccount(e.target.value),\n        className: \"input-field\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account.name,\n          children: [account.name, \" - \", account.currency, \" (\", account.balance, \")\"]\n        }, account.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: transactionAmount,\n        onChange: e => setTransactionAmount(e.target.value),\n        placeholder: \"Amount\",\n        className: \"input-field\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: transactionType,\n        onChange: e => setTransactionType(e.target.value),\n        className: \"input-field\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"deposit\",\n          children: \"Deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"withdrawal\",\n          children: \"Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"transfer\",\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: transactionCurrency,\n        onChange: e => setTransactionCurrency(e.target.value),\n        className: \"input-field\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Currency\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account.currency,\n          children: account.currency\n        }, account.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), transactionType === 'transfer' && /*#__PURE__*/_jsxDEV(\"select\", {\n        value: transactionTo,\n        onChange: e => setTransactionTo(e.target.value),\n        className: \"input-field\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Recipient Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account.name,\n          children: [account.name, \" - \", account.currency]\n        }, account.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddTransaction,\n        className: \"auth-button\",\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), isPasswordPopupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"password-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Enter Employee Password to Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: employeePassword,\n        onChange: e => setEmployeePassword(e.target.value),\n        placeholder: \"Password\",\n        className: \"input-field\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePasswordSubmit,\n        className: \"auth-button\",\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Transaction History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), transactionHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No transactions found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"From\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Timestamp\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transactionHistory.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.from\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.to || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.currency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(Transactions, \"C1WMUynn40SiXDapF5bhFriHfyY=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Transactions","_s","accounts","setAccounts","id","name","currency","balance","transactionHistory","setTransactionHistory","from","to","amount","type","timestamp","Date","toLocaleString","selectedAccount","setSelectedAccount","transactionAmount","setTransactionAmount","transactionType","setTransactionType","transactionCurrency","setTransactionCurrency","transactionTo","setTransactionTo","error","setError","isPasswordPopupVisible","setIsPasswordPopupVisible","employeePassword","setEmployeePassword","isPasswordCorrect","setIsPasswordCorrect","correctPassword","handleAddTransaction","parseFloat","isNaN","handlePasswordSubmit","processTransaction","updatedAccounts","accountIndex","findIndex","account","transferToAccount","targetAccountIndex","newTransaction","prevHistory","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","required","map","placeholder","onClick","length","transaction","index","_c","$RefreshReg$"],"sources":["C:/Users/mrdun/Desktop/BRICS/BRICS-App-V2-main/frontend/src/components/Transactions.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Transactions() {\r\n  // Accounts data (each account has a name, associated currency, and balance)\r\n  const [accounts, setAccounts] = useState([\r\n    { id: 1, name: 'Dollin', currency: 'BRL', balance: 1000 },\r\n    { id: 2, name: 'Wollice', currency: 'RUB', balance: 8000 },\r\n    { id: 3, name: 'Shetana', currency: 'INR', balance: 15000 },\r\n    { id: 4, name: 'Miben', currency: 'CNY', balance: 2000 },\r\n    { id: 5, name: 'Milema', currency: 'ZAR', balance: 5000 },\r\n  ]);\r\n\r\n  // Initial transaction history (transactions that relate to accounts)\r\n  const [transactionHistory, setTransactionHistory] = useState([\r\n    { from: 'workUser', to: 'Dollin', amount: 500, type: 'transfer', currency: 'BRL', timestamp: new Date().toLocaleString() },\r\n    { from: 'workUser', to: 'Shetana', amount: 1000, type: 'deposit', currency: 'RUB', timestamp: new Date().toLocaleString() },\r\n    { from: 'workUser', to: 'Miben', amount: 200, type: 'transfer', currency: 'INR', timestamp: new Date().toLocaleString() },\r\n  ]);\r\n\r\n  // Transaction form state\r\n  const [selectedAccount, setSelectedAccount] = useState('');\r\n  const [transactionAmount, setTransactionAmount] = useState('');\r\n  const [transactionType, setTransactionType] = useState('');\r\n  const [transactionCurrency, setTransactionCurrency] = useState('');\r\n  const [transactionTo, setTransactionTo] = useState('');\r\n  const [error, setError] = useState(null);\r\n  const [isPasswordPopupVisible, setIsPasswordPopupVisible] = useState(false);\r\n  const [employeePassword, setEmployeePassword] = useState('');\r\n  const [isPasswordCorrect, setIsPasswordCorrect] = useState(false);\r\n\r\n  const correctPassword = 'StrongPassword123!'; // Hardcoded strong password\r\n\r\n  const handleAddTransaction = () => {\r\n    if (!selectedAccount || !transactionAmount || !transactionType || !transactionCurrency) {\r\n      setError(\"Please fill in all fields\");\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(transactionAmount);\r\n    if (isNaN(amount) || amount <= 0) {\r\n      setError(\"Please enter a valid amount.\");\r\n      return;\r\n    }\r\n\r\n    // Show password pop-up for confirmation\r\n    setIsPasswordPopupVisible(true);\r\n  };\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (employeePassword === correctPassword) {\r\n      setIsPasswordCorrect(true);\r\n      processTransaction(); // Proceed with transaction if password is correct\r\n    } else {\r\n      setError(\"Incorrect password. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const processTransaction = () => {\r\n    const amount = parseFloat(transactionAmount);\r\n    const updatedAccounts = [...accounts];\r\n    const accountIndex = updatedAccounts.findIndex((account) => account.name === selectedAccount);\r\n\r\n    if (transactionType === 'deposit') {\r\n      updatedAccounts[accountIndex].balance += amount;\r\n    } else if (transactionType === 'withdrawal') {\r\n      if (updatedAccounts[accountIndex].balance >= amount) {\r\n        updatedAccounts[accountIndex].balance -= amount;\r\n      } else {\r\n        setError(\"Insufficient funds for withdrawal.\");\r\n        return;\r\n      }\r\n    } else if (transactionType === 'transfer') {\r\n      const transferToAccount = transactionTo;\r\n      const targetAccountIndex = updatedAccounts.findIndex((account) => account.name === transferToAccount);\r\n\r\n      if (targetAccountIndex === -1) {\r\n        setError(\"Invalid target account.\");\r\n        return;\r\n      }\r\n\r\n      if (updatedAccounts[accountIndex].balance >= amount) {\r\n        updatedAccounts[accountIndex].balance -= amount;\r\n        updatedAccounts[targetAccountIndex].balance += amount;\r\n\r\n        // Record the transfer between accounts\r\n        const newTransaction = {\r\n          from: selectedAccount,\r\n          to: transactionTo,\r\n          amount: amount,\r\n          type: 'transfer',\r\n          currency: transactionCurrency,\r\n          timestamp: new Date().toLocaleString(),\r\n        };\r\n\r\n        // Add the new transaction at the top of the history (keep only the 3 latest transactions)\r\n        setTransactionHistory(prevHistory => [newTransaction, ...prevHistory].slice(0, 3));\r\n        setError(null);\r\n      } else {\r\n        setError(\"Insufficient funds for transfer.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Create a non-transfer transaction\r\n    if (transactionType !== 'transfer') {\r\n      const newTransaction = {\r\n        from: selectedAccount,\r\n        amount: amount,\r\n        type: transactionType,\r\n        currency: transactionCurrency,\r\n        timestamp: new Date().toLocaleString(),\r\n      };\r\n\r\n      // Add the new transaction at the top of the history (keep only the 3 latest transactions)\r\n      setTransactionHistory(prevHistory => [newTransaction, ...prevHistory].slice(0, 3));\r\n    }\r\n\r\n    // Update the accounts\r\n    setAccounts(updatedAccounts);\r\n    setTransactionAmount('');\r\n    setTransactionType('');\r\n    setTransactionCurrency('');\r\n    setTransactionTo('');\r\n    setSelectedAccount('');\r\n    setIsPasswordPopupVisible(false); // Close password popup after processing the transaction\r\n  };\r\n\r\n  return (\r\n    <div className=\"transactions-container\">\r\n      <h2 className=\"form-title\">Transactions</h2>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {/* Transaction Form */}\r\n      <div className=\"transaction-form\">\r\n        <select\r\n          value={selectedAccount}\r\n          onChange={(e) => setSelectedAccount(e.target.value)}\r\n          className=\"input-field\"\r\n          required\r\n        >\r\n          <option value=\"\">Select Account</option>\r\n          {accounts.map((account) => (\r\n            <option key={account.id} value={account.name}>\r\n              {account.name} - {account.currency} ({account.balance})\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          value={transactionAmount}\r\n          onChange={(e) => setTransactionAmount(e.target.value)}\r\n          placeholder=\"Amount\"\r\n          className=\"input-field\"\r\n          required\r\n        />\r\n        <select\r\n          value={transactionType}\r\n          onChange={(e) => setTransactionType(e.target.value)}\r\n          className=\"input-field\"\r\n          required\r\n        >\r\n          <option value=\"\">Select Type</option>\r\n          <option value=\"deposit\">Deposit</option>\r\n          <option value=\"withdrawal\">Withdrawal</option>\r\n          <option value=\"transfer\">Transfer</option>\r\n        </select>\r\n        <select\r\n          value={transactionCurrency}\r\n          onChange={(e) => setTransactionCurrency(e.target.value)}\r\n          className=\"input-field\"\r\n          required\r\n        >\r\n          <option value=\"\">Select Currency</option>\r\n          {accounts.map((account) => (\r\n            <option key={account.id} value={account.currency}>\r\n              {account.currency}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        {transactionType === 'transfer' && (\r\n          <select\r\n            value={transactionTo}\r\n            onChange={(e) => setTransactionTo(e.target.value)}\r\n            className=\"input-field\"\r\n            required\r\n          >\r\n            <option value=\"\">Select Recipient Account</option>\r\n            {accounts.map((account) => (\r\n              <option key={account.id} value={account.name}>\r\n                {account.name} - {account.currency}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )}\r\n        <button onClick={handleAddTransaction} className=\"auth-button\">Add Transaction</button>\r\n      </div>\r\n\r\n      {/* Password Confirmation Pop-Up */}\r\n      {isPasswordPopupVisible && (\r\n        <div className=\"password-popup\">\r\n          <h3>Enter Employee Password to Confirm</h3>\r\n          <input\r\n            type=\"password\"\r\n            value={employeePassword}\r\n            onChange={(e) => setEmployeePassword(e.target.value)}\r\n            placeholder=\"Password\"\r\n            className=\"input-field\"\r\n            required\r\n          />\r\n          <button onClick={handlePasswordSubmit} className=\"auth-button\">Confirm</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Transaction History */}\r\n      <div className=\"transaction-history\">\r\n        <h3>Transaction History</h3>\r\n        {transactionHistory.length === 0 ? (\r\n          <p>No transactions found</p>\r\n        ) : (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>From</th>\r\n                <th>To</th>\r\n                <th>Amount</th>\r\n                <th>Type</th>\r\n                <th>Currency</th>\r\n                <th>Timestamp</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {transactionHistory.map((transaction, index) => (\r\n                <tr key={index}>\r\n                  <td>{transaction.from}</td>\r\n                  <td>{transaction.to || 'N/A'}</td>\r\n                  <td>{transaction.amount}</td>\r\n                  <td>{transaction.type}</td>\r\n                  <td>{transaction.currency}</td>\r\n                  <td>{transaction.timestamp}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Transactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}