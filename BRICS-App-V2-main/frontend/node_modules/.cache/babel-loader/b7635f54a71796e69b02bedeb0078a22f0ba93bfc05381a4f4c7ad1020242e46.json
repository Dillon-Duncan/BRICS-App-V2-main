{"ast":null,"code":"const BASE_URL = 'http://localhost:8080';\n\n// API calls for authentication\nexport async function loginUserAPI({\n  username,\n  password,\n  accNumber\n}) {\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userName: username,\n      password,\n      accNumber\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\nexport async function loginEmployeeAPI({\n  username,\n  password\n}) {\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    }),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\nexport async function registerUser(userData) {\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData),\n    credentials: 'include'\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Registration failed');\n  }\n  return response.json();\n}\n\n// Budget related API calls\nexport async function getBudget(token) {\n  const response = await fetch('/api/budget', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to fetch budget');\n  }\n  return response.json();\n}\nexport async function updateBudget(budgetData, token) {\n  const response = await fetch('/api/budget', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(budgetData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to update budget');\n  }\n  return response.json();\n}\n\n// Transaction related API calls\nexport async function getTransactions(token) {\n  const response = await fetch('/api/transactions', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to fetch transactions');\n  }\n  return response.json();\n}\nexport async function createTransaction(transactionData, token) {\n  const response = await fetch('/api/transactions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(transactionData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to create transaction');\n  }\n  return response.json();\n}","map":{"version":3,"names":["BASE_URL","loginUserAPI","username","password","accNumber","response","fetch","method","headers","body","JSON","stringify","userName","credentials","ok","error","json","Error","loginEmployeeAPI","registerUser","userData","getBudget","token","updateBudget","budgetData","getTransactions","createTransaction","transactionData"],"sources":["C:/Users/mrdun/Downloads/BRICS-App-V2-main/BRICS-App-V2-main/frontend/src/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080';\n\n// API calls for authentication\nexport async function loginUserAPI({ username, password, accNumber }) {\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ userName: username, password, accNumber }),\n    credentials: 'include'\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json();\n}\n\nexport async function loginEmployeeAPI({ username, password }) {\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n    credentials: 'include'\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json();\n}\n\nexport async function registerUser(userData) {\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(userData),\n    credentials: 'include'\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Registration failed');\n  }\n\n  return response.json();\n}\n\n// Budget related API calls\nexport async function getBudget(token) {\n  const response = await fetch('/api/budget', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to fetch budget');\n  }\n\n  return response.json();\n}\n\nexport async function updateBudget(budgetData, token) {\n  const response = await fetch('/api/budget', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(budgetData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to update budget');\n  }\n\n  return response.json();\n}\n\n// Transaction related API calls\nexport async function getTransactions(token) {\n  const response = await fetch('/api/transactions', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to fetch transactions');\n  }\n\n  return response.json();\n}\n\nexport async function createTransaction(transactionData, token) {\n  const response = await fetch('/api/transactions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(transactionData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to create transaction');\n  }\n\n  return response.json();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}