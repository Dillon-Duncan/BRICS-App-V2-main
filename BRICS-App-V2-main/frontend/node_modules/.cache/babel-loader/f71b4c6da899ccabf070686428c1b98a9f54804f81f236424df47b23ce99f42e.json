{"ast":null,"code":"const BASE_URL = 'http://localhost:8080';\nlet csrfToken = null;\nasync function getCsrfToken() {\n  if (!csrfToken) {\n    const response = await fetch(`${BASE_URL}/csrf-token`, {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    csrfToken = data.csrfToken;\n  }\n  return csrfToken;\n}\nexport async function registerUser(userData) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Registration failed');\n  }\n  return response.json();\n}\nexport async function loginUserAPI({\n  username,\n  password,\n  accNumber\n}) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      userName: username,\n      password,\n      accNumber\n    })\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\nexport async function loginEmployeeAPI({\n  username,\n  password\n}) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n  return response.json();\n}\n\n// Budget related API calls\nexport async function getBudget(token) {\n  const response = await fetch('/api/budget', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to fetch budget');\n  }\n  return response.json();\n}\nexport async function updateBudget(budgetData, token) {\n  const response = await fetch('/api/budget', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(budgetData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to update budget');\n  }\n  return response.json();\n}\n\n// Transaction related API calls\nexport async function getTransactions(token) {\n  const response = await fetch('/api/transactions', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to fetch transactions');\n  }\n  return response.json();\n}\nexport async function createTransaction(transactionData, token) {\n  const response = await fetch('/api/transactions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(transactionData)\n  });\n  if (!response.ok) {\n    const {\n      error\n    } = await response.json();\n    throw new Error(error || 'Failed to create transaction');\n  }\n  return response.json();\n}","map":{"version":3,"names":["BASE_URL","csrfToken","getCsrfToken","response","fetch","credentials","data","json","registerUser","userData","token","method","headers","body","JSON","stringify","ok","error","Error","loginUserAPI","username","password","accNumber","userName","loginEmployeeAPI","getBudget","updateBudget","budgetData","getTransactions","createTransaction","transactionData"],"sources":["C:/Users/mrdun/Downloads/BRICS-App-V2-main/BRICS-App-V2-main/frontend/src/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:8080';\nlet csrfToken = null;\n\nasync function getCsrfToken() {\n  if (!csrfToken) {\n    const response = await fetch(`${BASE_URL}/csrf-token`, {\n      credentials: 'include'\n    });\n    const data = await response.json();\n    csrfToken = data.csrfToken;\n  }\n  return csrfToken;\n}\n\nexport async function registerUser(userData) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Registration failed');\n  }\n\n  return response.json();\n}\n\nexport async function loginUserAPI({ username, password, accNumber }) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({ userName: username, password, accNumber }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json();\n}\n\nexport async function loginEmployeeAPI({ username, password }) {\n  const token = await getCsrfToken();\n  const response = await fetch(`${BASE_URL}/employee-login`, {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json',\n      'CSRF-Token': token\n    },\n    credentials: 'include',\n    body: JSON.stringify({ username, password }),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Invalid login');\n  }\n\n  return response.json();\n}\n\n// Budget related API calls\nexport async function getBudget(token) {\n  const response = await fetch('/api/budget', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to fetch budget');\n  }\n\n  return response.json();\n}\n\nexport async function updateBudget(budgetData, token) {\n  const response = await fetch('/api/budget', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(budgetData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to update budget');\n  }\n\n  return response.json();\n}\n\n// Transaction related API calls\nexport async function getTransactions(token) {\n  const response = await fetch('/api/transactions', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to fetch transactions');\n  }\n\n  return response.json();\n}\n\nexport async function createTransaction(transactionData, token) {\n  const response = await fetch('/api/transactions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(transactionData),\n  });\n\n  if (!response.ok) {\n    const { error } = await response.json();\n    throw new Error(error || 'Failed to create transaction');\n  }\n\n  return response.json();\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AACxC,IAAIC,SAAS,GAAG,IAAI;AAEpB,eAAeC,YAAYA,CAAA,EAAG;EAC5B,IAAI,CAACD,SAAS,EAAE;IACd,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAa,EAAE;MACrDK,WAAW,EAAE;IACf,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClCN,SAAS,GAAGK,IAAI,CAACL,SAAS;EAC5B;EACA,OAAOA,SAAS;AAClB;AAEA,OAAO,eAAeO,YAAYA,CAACC,QAAQ,EAAE;EAC3C,MAAMC,KAAK,GAAG,MAAMR,YAAY,CAAC,CAAC;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,WAAW,EAAE;IACnDW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,YAAY,EAAEF;IAChB,CAAC;IACDL,WAAW,EAAE,SAAS;IACtBQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACN,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,qBAAqB,CAAC;EACjD;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeY,YAAYA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAU,CAAC,EAAE;EACpE,MAAMZ,KAAK,GAAG,MAAMR,YAAY,CAAC,CAAC;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,QAAQ,EAAE;IAChDW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,YAAY,EAAEF;IAChB,CAAC;IACDL,WAAW,EAAE,SAAS;IACtBQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEQ,QAAQ,EAAEH,QAAQ;MAAEC,QAAQ;MAAEC;IAAU,CAAC;EAClE,CAAC,CAAC;EAEF,IAAI,CAACnB,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,eAAe,CAAC;EAC3C;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeiB,gBAAgBA,CAAC;EAAEJ,QAAQ;EAAEC;AAAS,CAAC,EAAE;EAC7D,MAAMX,KAAK,GAAG,MAAMR,YAAY,CAAC,CAAC;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,iBAAiB,EAAE;IACzDW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,YAAY,EAAEF;IAChB,CAAC;IACDL,WAAW,EAAE,SAAS;IACtBQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEK,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EAEF,IAAI,CAAClB,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,eAAe,CAAC;EAC3C;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA,OAAO,eAAekB,SAASA,CAACf,KAAK,EAAE;EACrC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;IAC1CQ,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUF,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,wBAAwB,CAAC;EACpD;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAemB,YAAYA,CAACC,UAAU,EAAEjB,KAAK,EAAE;EACpD,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;IAC1CO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUF,KAAK;IAClC,CAAC;IACDG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,UAAU;EACjC,CAAC,CAAC;EAEF,IAAI,CAACxB,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,yBAAyB,CAAC;EACrD;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA,OAAO,eAAeqB,eAAeA,CAAClB,KAAK,EAAE;EAC3C,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;IAChDQ,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUF,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,8BAA8B,CAAC;EAC1D;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAesB,iBAAiBA,CAACC,eAAe,EAAEpB,KAAK,EAAE;EAC9D,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;IAChDO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUF,KAAK;IAClC,CAAC;IACDG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACe,eAAe;EACtC,CAAC,CAAC;EAEF,IAAI,CAAC3B,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMd,QAAQ,CAACI,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIW,KAAK,CAACD,KAAK,IAAI,8BAA8B,CAAC;EAC1D;EAEA,OAAOd,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}